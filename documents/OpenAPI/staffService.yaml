openapi: "3.0.0"

info:
  title: "Staff Service"
  version: "1.0.0"
  description: |
    ## Service for staff
    - Search staffs by parameter.
    - Get staff details.
  license:
    name: "MIT License"
    url: "https://opensource.org/licenses/MIT"

servers:
  - url: "http://localhost:{port}"
    description: "Local Development"
    variables:
      port:
        enum: ["8080"]
        default: "8080"

tags:
  - name: "getStaff"
    description: "Return staff information"

paths:
  "/apl/api/staffs":
    get:
      summary: "Get staffs"
      description: "Get staffs by parameter"
      tags: ["getStaff"]
      parameters:
        - name: limitSize
          in: query
          required: false
          schema: { type: int }
        - name: page
          in: query
          required: false
          schema: { type: int }
        - name: userId
          in: query
          required: false
          schema: { type: string }
        - name: userName
          in: query
          required: false
          schema: { type: string }
        - name: departmentCd
          in: query
          required: false
          schema: { type: string }
        - name: paramExpirationStart
          in: query
          required: false
          schema: { type: string }
        - name: paramExpirationEnd
          in: query
          required: false
          schema: { type: string }
      responses:
        "200":
          description: "Success operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Staffs"
        "400":
          description: "Invalid request parameter"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidRequest"

components:
  schemas:
    Staffs:
      type: object
      properties:
        count: { type: integer, example: 2 }
        limitSize: { type: integer, example: 25 }
        page: { type: integer, example: 1 }
        staffs:
          type: array
          items:
            type: object
            properties:
              userId: { type: string, example: "STF0000003" }
              familyName: { type: string, example: "沼田" }
              firstName: { type: string, example: "花恋" }
              departmentCd: { type: string, example: "D20001" }
              departmentName: { type: string, example: "技術開発部" }
              genderCd: { type: string, example: "0002" }
              genderName: { type: string, example: "女性" }
              birthdate: { type: string, example: "1980-05-02" }
              bloodTypeCd: { type: string, example: "0002" }
              bloodTypeName: { type: string, example: "B" }
              addressPrefectureCd: { type: string, example: "0029" }
              addressPrefectureName: { type: string, example: "奈良県" }
              addressMunicipality:
                {
                  type: string,
                  example: "奈良市生琉里町4-11-18生琉里町シティ205",
                }
              privateTelNo: { type: string, example: "03758596249" }
              privateEmail: { type: string, example: "user3@private.com" }
              workplaceTelNo: { type: string, example: "04850116018" }
              workplaceEmail: { type: string, example: "user3@sales.com" }
              expirationStart: { type: string, example: "2022-06-01" }
              expirationEnd: { type: string, example: "2022-12-31" }
              insertTimestamp:
                { type: string, example: "2022-06-04T02:15:23.000+00:00" }
              insertUser: { type: string, example: "admin" }
              updateTimestamp:
                { type: string, example: "2022-06-04T02:15:23.000+00:00" }
              updateUser: { type: string, example: "admin" }
              expirationDate:
                { type: string, example: "2022-09-04T00:00:00.000+00:00" }
        errors:
          type: object
          properties:
            field:
              type: object
            global:
              type: array
              items:
                type: string
              example: []
    InvalidRequest:
      type: object
      properties:
        count: { type: integer, example: 0 }
        limitSize: { type: integer, example: 0 }
        page: { type: integer, example: 0 }
        staffs:
          type: object
          example: null
        errors:
          type: object
          properties:
            field:
              type: object
              additionalProperties:
                type: string
              example:
                userId: "半角英数字で入力してください"
                workplaceEmail: "半角英数記号で入力してください"
            global:
              type: array
              items:
                type: string
              example:
                - "有効開始日は有効終了日よりも前の日付を入力してください"
                - "同一の電話番号は入力不可です"
